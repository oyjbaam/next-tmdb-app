
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String? @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  accounts              Account[]
  likedMovies           LikedMovie[]
  movieLists            MovieList[]
  @@map("User")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String 
  token String @unique
  expires DateTime

  @@unique([email,token])
  @@map("VerificationToken")
}


model LikedMovie {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tmdbId      Int
  title       String
  releaseDate String?
  imgPath     String?
  vote        Float
  mediaType   String

  @@map("LikedMovie")
  @@index([userId])
}

model MovieList {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userId    String @map("user_id") @db.ObjectId
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  movies    MovieListMovie[]

  @@map("MovieList")
}

model Movie {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  tmdbId      Int
  title       String
  releaseDate String?
  imgPath     String?
  vote        Float
  mediaType   String
  inMovieLists MovieListMovie[]
  @@map("Movie")
}

model MovieListMovie {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  movieListId String @db.ObjectId
  movieId     String @db.ObjectId
  movieList   MovieList @relation(fields: [movieListId], references: [id], onDelete: Cascade)
  movie       Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  @@map("MovieListMovie")
}